name: 'Terraform'

on:
  push:
    branches: [ "main", "dev/**" ]
  pull_request:
    branches: [ "main" ]
  schedule: 
    - cron:  '45 13 * * *'

env:
  TF_CLOUD_ORGANIZATION: ${{ secrets.ORGANIZATION }}
  TF_CLOUD_HOSTNAME: "app.terraform.io"
  TF_WORKSPACE: ${{ secrets.WORKSPACE }}
permissions:
  contents: read

jobs:
  terraform:
    name: 'Terraform'
    runs-on: ubuntu-latest
    environment: production
    if: github.event.schedule == '45 13 * * *' 
    # if: github.event_name == 'pull_request' || github.event_name == 'push' 

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v4

    # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      run: terraform init

    # Checks that all Terraform configuration files adhere to a canonical format
    - name: Terraform Format
      run: terraform fmt -check

    # Generates an execution plan for Terraform
    - name: Terraform Plan
      run: terraform plan -input=false


      # On push to "main", build or change infrastructure according to Terraform configuration files
      # Note: It is recommended to set up a required "strict" status check in your repository for "Terraform Cloud". See the documentation on "strict" required status checks for more information: https://help.github.com/en/github/administering-a-repository/types-of-required-status-checks
    - name: Terraform Apply
      if: github.event_name == 'pull_request'
      run: terraform apply -auto-approve -input=false
    
  destroy:
    name: 'Destroy'
    runs-on: ubuntu-latest
    environment: production
    # if: github.event.schedule == '45 13 * * *' 
    outputs:
      result: ${{ steps.checks3.outputs.result }}


    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash
    steps:
    #implementing check to validate if bucket exists
    - name: Check if S3 exists
      id: checks3
      run: | 
        resp=$(aws s3 ls) 
        echo "result=$resp" >> $GITHUB_OUTPUT    
      env: 
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_REGION: "us-east-1"
      # Destroys object in bucket to allow for destroy
    - name: Delete S3 Objects
      if: contains( steps.checks3.outputs.result , 'ui-app-bucket') 
      run: aws s3 rm s3://ui-app-bucket/ --recursive
      env: 
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_REGION: "us-east-1"
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v4

    # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

          # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      run: terraform init

    # Checks that all Terraform configuration files adhere to a canonical format
    - name: Terraform Format
      run: terraform fmt -check

      # Destroys resources regularly as a cost reduction strategy
    - name: Terraform Destroy
      run: terraform destroy -auto-approve -input=false
